### HOW TO RELEASE
# update src/mstool/version.py
python -m build
twine upload dist/*


Dec. 12, 2023
I noticed that mass = 0 leads to a weird behavior in CG simulations.
The beads whose masses are 0 look like they have positional restraints.

Therefore, When writing a CG DMS file, I have to turn off guess_atomic_number.
Universe.write(guess_atomic_number=False)

I tried to add guess_atomic_number=False to every script that writes a CG DMS file.
But I have not checked this thoroughly yet.


Dec. 12, 2023
When loading DMS file using mstool.DMSFile or DesmondDMSFile,
it seems like openMM does not allow two residues that have the same chain and same residueid but different resname
(I think it was fine in PDB...?)
I hit this problem when I made a bilayer builder because ions did have same chain, residueid, and different resnames
e.g., 
/Z:SOD@SOD with associated resid 1
/Z:CLA@CLA with associated resid 1
will cause a problem in REM with the following error message:
ValueError: No template found for residue 1373 (CLA).

The best way to debug this was to print out the structural file into PDB.
from openmm.app import *
dms = DesmondDMSFile('step4_ungroup.dms')
with open('output.pdb', 'w') as f:
    PDBFile.writeFile(dms.topology, dms.positions, f)

HETATM 9363 CLA  CLA H   1      10.325   7.207  47.318  1.00  0.00          Cl
HETATM 9364 SOD  CLA H   1     -20.746   7.377 -46.384  1.00  0.00          Na
HETATM 9365 CLA  CLA H   2     -16.231  -4.763 -40.722  1.00  0.00          Cl
HETATM 9366 SOD  CLA H   2      -9.220   7.768 -41.875  1.00  0.00          Na

The solution was to provide a different chain to these ions.
Now positive ions will have chain of ZZ1
negative ions will have chain of ZZ2


Dec. 14, 2023
Cannot make energy the same between openMM and gromacs when a system has virtual_sites3.
Upon investigating this, I am 100% sure that this is relevant to virtual_sites3 but not anything else.
I first thought something was wrong with nonbonded. But all looked good.
If you make fake bonds between virtual particles and real particles and remove virtual_sites3,
the energy becomes the same
See ~/mstool/examples/test/martini_validation/CHL1_proof_virtual_sites
GMX    : 827297.000 kJ/mol
openMM : 827277.750 kJ/mol
openMM : 827277.750 kJ/mol
I think something might be wrong with the implementation of virtual sites of openMM (?).
Because parsing DMS to openMM looks fine upon checking with maccallumlab.
https://github.com/maccallumlab/martini_openmm/blob/master/martini_openmm/martini.py
Need to make a small test system.


Jan. 30, 2024
Ungroup with backbone=True places C-terminus atoms near origin. Fixed in 0.1.1.


Mar. 15, 2024
Tapering="shift" is required for Martini "NPT" simulations for proper equilibrium.
Volume and area will be different if tapering=None.
However, this will change the potential energy.
Therefore, in order to compare gromacs and openMM potential energy, tapering should be None.

If there is a protein:
    protein has x,y,z restraints...
    MembraneBarostat does not seem to be affected by Z restraints on lipids
If there is no protein:
    MembraneBarosat + Z restraints do not like each other...
    SO I removed Z restraints if there is no protein.


Mar.16 2024 
mass = 0 will not move in openMM. Check if any atoms do not move their positions

OpenMM EM is good enough with simply Martini Force Field.
Therefore, there is no need for REM.
> Well, actually, not true. If I don't run this, TRIO systems freezee....
> I think it is related to an initial structure.
> If you run REM, it at least squeezes a system and make an initial structure better

Tapering="shift" is must for regular Martini Force Field because of MonteCarloBarostat

CHL1 is problematic with whatever the existing models. 
It does not show up as a problem in REM but with regular Martini, yes.
Therefore, I made a fake CHL1 model without dihedrals but with bonds (like ENM)

MembraneBarostat + Z restraints do not like each other.
MembraneBarostat + Z restraints on lipids + XYZ restraints on protein seem ok.
MembraneBarostat + Sphere restraints on lipids also look ok.
Therefore,
1. For non-protein, remove Z restraints.
   Also, instead of shifiting back by the original shift,
   shift back by the center of the geometry of non W, non ions 

2. For protein, have a weak Z restraints.
   If there is protein, because it has XYZ restraints,
   the lipids seem fine to have a weak Z restraints.
   shift back by 

3. For sphere, lipids have a sphereposre (kinda xyz restraints)
   Therefore, it doesn't mess up with positional restraints

 Mar.17 2024
Interestingly, depending on bilayer construction with 
solvation(membrane=True) or solvation(membrane=False),
the APL becomes slightly different.

I no longer think solvation(membrane=True) is necessary.
I increased the nonbondedCutoff to 1.1 nm from 1.05 nm

Maybe this is why Triolein system get crystalized?

May. 5 2024
Abundant water helps CG equilibriation when there are proteins

May. 10 2024
Implemented amber selection. I changed the existing amberSelection,
which is used by TruncateProtein.
If TruncateProtein complains, check amberSelection.
I did not run any test on TruncateProtein after updating amberSelection

May. 11 2024
Removing guess_atomic_number

siyoungkim@pool-envpn-10-232-30-36 core % grep guess_atomic_number * -n
grep: __pycache__: Is a directory
fill.py:45:        if out: self.write(out, guess_atomic_number=False)
map.py:31:            self.write(out, guess_atomic_number=False)
martinizedms.py:116:        universe.write(out, guess_atomic_number=False)
mutate.py:22:            self.write(out, guess_atomic_number=False)
solvate_martini.py:54:        if out: wateru.write(out, guess_atomic_number=False)
solvate_martini.py:68:    if out: u.write(out, guess_atomic_number=False)
solvate_martini.py:170:    if out: u.write(out, guess_atomic_number=False)
solvate_martini.py:214:        if out: solvatedu.write(out, guess_atomic_number=False)
ungroup.py:20:        guess_atomic_number=False, fibor=0.5, version='v1',
ungroup.py:87:        super().__init__(data=self.data, guess_atomic_number=guess_atomic_number)
universe.py:54:                 guess_atomic_number=False):
universe.py:74:        guess_atomic_number : bool
universe.py:128:        if guess_atomic_number: self.update_anum_mass()
universe.py:218:    def write(self, ofile, guess_atomic_number=True, wrap=False):
universe.py:226:            self.writeDMS(ofile, guess_atomic_number)
universe.py:368:    def writeDMS(self, ofile, guess_atomic_number):
siyoungkim@pool-envpn-10-232-30-36 utils % grep guess_atomic_number * -n
grep: __pycache__: Is a directory
rock.py:38:        u.write(self.dms, guess_atomic_number=True)
rockchain.py:47:        u.write(self.dms, guess_atomic_number=True)
rockresidue.py:45:        u.write(self.dms, guess_atomic_number=True)

Jul 4 2024 (version 0.3.6)
- SphereBuilder -> the radius of the positional restraints was not correct when sep is used (for LDMaker).
- Now changing the atoms from GL1 to PO4 for positional restraints because TRIO has GL1.
- When POPC tails are aggregated at a sphere surface, that suggests too low APL. (APL of 64A^2 seems quite low for spherical LD). 
- If this happenes, reduce the number of phospholipids, so that APL becomes high (e.g., 70A^2).
- TRIO as SURF-TG and TRIV as CORE-TG works:
  martini_add=[mstool.TRIOMARTINI, mstool.TRIOMARTINI5],
  mapping_add=[mstool.TRIOMAPPING, mstool.TRIOMAPPING5],
  ff_add=mstool.TRIOFF

